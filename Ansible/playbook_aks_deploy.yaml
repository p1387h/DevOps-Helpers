# Requirements for this playbook:
# Tools:
#   - terraform
#   - az CLI
#   - helm
#   - kubectl
#   - istioctl
#   - for the k8s module:
#     - python
#     - openshift
#     - PyYAML
# The service principal requires the following api permissions:
#   - Application.ReadWrite.All OR Application.ReadWrite.OwnedBy
# A configuration.secret.yaml in the following format:
#   # Azure information.
#   azure_username: XXXXX
#   azure_password: XXXXX
#   azure_client_id: XXXXX
#   azure_client_secret: XXXXX
#   azure_subscription_id: XXXXX
#   azure_tenant_id: XXXXX
#   # Grafana credentials.
#   grafana_username: XXXXX
#   grafana_password: XXXXX
#   # Kiali credentials.
#   kiali_username: XXXXX
#   kiali_password: XXXXX

- name: "Setting up an aks environment with istio and different testing applications"
  hosts: localhost
  connection: local
  vars:
    # Different modes are:
    # - USERNAME_PASSWORD
    # - SERVICE_PRINCIPAL
    mode: "USERNAME_PASSWORD"
    aks_project_dir: "../Kubernetes/Azure/deploy"
    kubectl_config: "./kube.config"
    istio_project_dir: "../Kubernetes/Azure/configure/istio"
    istio_config_name: "istiooperator_configuration.temp.yaml"
  vars_files:
      - ./configuration.secret.yaml
  tasks:

  # Make sure all other needed variables are loaded at the beginning.
  - name: "Verifying the existence of all other needed variables"
    assert:
      that:
        - mode is defined
        # Azure information.
        - azure_username is defined
        - azure_password is defined
        - azure_subscription_id is defined
        - azure_client_id is defined
        - azure_client_secret is defined
        - azure_tenant_id is defined
        # Grafana credentials.
        - grafana_username is defined
        - grafana_password is defined
        # Kiali credentials.
        - kiali_username is defined
        - kiali_password is defined
        # File paths and names.
        - aks_project_dir is defined
        - kubectl_config is defined
        - istio_project_dir is defined
        - istio_config_name is defined

  # Log into the Azure CLI.
  - import_tasks: ./tasks/azure_login.yaml
    vars:
      login_mode: "{{ mode }}"
      login_azure_username: "{{ azure_username }}"
      login_azure_password: "{{ azure_password }}"
      login_azure_subscription_id: "{{ azure_subscription_id }}"
      login_azure_client_id: "{{ azure_client_id }}"
      login_azure_client_secret: "{{ azure_client_secret }}"
      login_azure_tenant_id: "{{ azure_tenant_id }}"

  # Deploy the AKS.
  - name: "Deploying the AKS into the Azure cloud"
    terraform:
      project_path: "{{ aks_project_dir }}"
      state: present
      force_init: true
    register: "terraform_output"

  # Show the output values of the terraform task.
  - name: "Displaying terraform output"
    debug: var=terraform_output.outputs
  
  # Log out of the Azure CLI.
  - import_tasks: ./tasks/azure_logout.yaml

  # Log into the Azure CLI as the cluster admin.
  - import_tasks: ./tasks/azure_login.yaml
    vars:
      login_mode: "SERVICE_PRINCIPAL"
      login_azure_client_id: "{{ terraform_output.outputs.admin_app_id.value }}"
      login_azure_client_secret: "{{ terraform_output.outputs.admin_app_secret.value }}"
      login_azure_tenant_id: "{{ azure_tenant_id }}"

  # Get the admin credentials for the Kubernetes instance and store
  # it in an accessible file.
  - name: "Getting kubectl configuration."
    environment:
      CLUSTERNAME: "{{ terraform_output.outputs.aks_resource_name.value }}"
      RESOURCE_GROUP: "{{ terraform_output.outputs.resource_group_resources.value }}"
      KUBE_CONFIG_LOCATION: "{{ kubectl_config }}"
    shell: az aks get-credentials -n $CLUSTERNAME -g $RESOURCE_GROUP --file - --admin > $KUBE_CONFIG_LOCATION
  
  # Log out of the Azure CLI.
  - import_tasks: ./tasks/azure_logout.yaml
  
  # # Create the istio ingressgateway namespace.
  - name: "Creating the ingressgateway namespace."
    k8s:
      src : "{{ istio_project_dir }}/namespace_ingressgateway.yaml"
      kubeconfig: "{{ kubectl_config }}"
      state: present

  # Create the istio egressgateway namespace.
  - name: "Creating the egressgateway namespace."
    k8s:
      src : "{{ istio_project_dir }}/namespace_egressgateway.yaml"
      kubeconfig: "{{ kubectl_config }}"
      state: present

  # Prepare the istio configuration file.
  - import_tasks: ./tasks/istio_prepare_configuration.yaml
    vars:
      istio_configuration_project_dir: "{{ istio_project_dir }}"
      istio_configuration_file_name: "{{ istio_config_name }}"
      loadbalancer_ip_resource_group: "{{ terraform_output.outputs.resource_group_resources.value }}"
      loadbalancer_ip: "{{ terraform_output.outputs.public_ip.value }}"
      loadbalancer_dns: "{{ terraform_output.outputs.aks_name.value }}"
  
  # Install istio on the cluster.
  - name: "Installing istio."
    shell: "istioctl install -f {{ istio_project_dir }}/{{ istio_config_name }} -c {{ kubectl_config }}"
  
  # Label the created istio-system namespace in order to apply 
  # kubernetes network policies. Do the same for the kube-system 
  # namespace.
  - name: Adding label to namespace 'istio-system'.
    k8s:
      kubeconfig: "{{ kubectl_config }}"
      api_version: v1
      namespace: istio-system
      kind: namespace
      name: istio-system
      state: present
      resource_definition:
        metadata:
          labels:
            istio: system
  - name: Adding label to namespace 'kube-system'.
    k8s:
      kubeconfig: "{{ kubectl_config }}"
      api_version: v1
      namespace: kube-system
      kind: namespace
      name: kube-system
      state: present
      resource_definition:
        metadata:
          labels:
            ns: kube-system

  # Get the labels to check them later on.
  - name: "Verifying the label in 'istio-system'."
    k8s_info:
      kubeconfig: "{{ kubectl_config }}"
      api_version: v1
      namespace: istio-system
      kind: namespace
      name: istio-system
    register: istio_system_labels
  - name: "Verifying the label in 'kube-system'."
    k8s_info:
      kubeconfig: "{{ kubectl_config }}"
      api_version: v1
      namespace: kube-system
      kind: namespace
      name: kube-system
    register: kube_system_labels

  # Output the labels in order to be able to manually verify them.
  - name: "Displaying created labels"
    debug: var={{ item }}.metadata.labels
    loop: "{{ [istio_system_labels.resources, kube_system_labels.resources] | flatten(1) }}"

  # Enforce mutual tls in istio.
  - name: "Enforcing mutual tls in istio."
    k8s:
      src : "{{ istio_project_dir }}/peerauthentication_mutualtls.yaml"
      kubeconfig: "{{ kubectl_config }}"
      state: present
