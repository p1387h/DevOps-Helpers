# Verify that all needed variables are set.
- name: "Verifying the existence of all needed variables."
  assert:
    that:
      - istio_kubectl_config is defined
      - istio_configuration_project_dir is defined
      - istio_configuration_file_name is defined
      - istio_loadbalancer_ip_resource_group is defined
      - istio_loadbalancer_ip is defined
      - istio_loadbalancer_dns is defined

# Create the istio ingressgateway namespace.
- name: "Creating the ingressgateway namespace."
  k8s:
    src : "{{ istio_configuration_project_dir }}/namespace_ingressgateway.yaml"
    kubeconfig: "{{ istio_kubectl_config }}"
    state: present

# Create the istio egressgateway namespace.
- name: "Creating the egressgateway namespace."
  k8s:
    src : "{{ istio_configuration_project_dir }}/namespace_egressgateway.yaml"
    kubeconfig: "{{ istio_kubectl_config }}"
    state: present

  # Copy the file in order to replace placeholders in it.
- name: "Making a changeable copy of the istio configuration."
  copy:
    src: "{{ istio_configuration_project_dir }}/istiooperator_configuration.yaml"
    dest: "{{ istio_configuration_project_dir }}/{{ istio_configuration_file_name }}"

# Replace: $IP_RESOURCEGROUP with terraform value.
- name: "Replacing placeholder '$IP_RESOURCEGROUP' with the resource group name for the general resources."
  replace:
    path: "{{ istio_configuration_project_dir }}/{{ istio_configuration_file_name }}"
    regexp: '\$IP_RESOURCEGROUP'
    replace: '{{ istio_loadbalancer_ip_resource_group }}'

# Replace: $LOADBALANCER_IP with terraform value.
- name: "Replacing placeholder '$LOADBALANCER_IP' with the external cluster ip."
  replace:
    path: "{{ istio_configuration_project_dir }}/{{ istio_configuration_file_name }}"
    regexp: '\$LOADBALANCER_IP'
    replace: '{{ istio_loadbalancer_ip }}'

# Replace: $LOADBALANCER_DNS with terraform value.
- name: "Replacing placeholder '$LOADBALANCER_DNS' with the external cluster dns."
  replace:
    path: "{{ istio_configuration_project_dir }}/{{ istio_configuration_file_name }}"
    regexp: '\$LOADBALANCER_DNS'
    replace: '{{ istio_loadbalancer_dns }}'
  
# Install istio on the cluster.
- name: "Installing istio."
  shell: "istioctl install -f {{ istio_configuration_project_dir }}/{{ istio_configuration_file_name }} -c {{ istio_kubectl_config }}"

# Label the created istio-system namespace in order to apply 
# kubernetes network policies. Do the same for the kube-system 
# namespace.
- name: "Adding label to namespace 'istio-system'."
  k8s:
    kubeconfig: "{{ istio_kubectl_config }}"
    api_version: v1
    namespace: istio-system
    kind: namespace
    name: istio-system
    state: present
    resource_definition:
      metadata:
        labels:
          istio: system
- name: "Adding label to namespace 'kube-system'."
  k8s:
    kubeconfig: "{{ istio_kubectl_config }}"
    api_version: v1
    namespace: kube-system
    kind: namespace
    name: kube-system
    state: present
    resource_definition:
      metadata:
        labels:
          ns: kube-system

# Get the labels to check them later on.
- name: "Verifying the label in 'istio-system'."
  k8s_info:
    kubeconfig: "{{ istio_kubectl_config }}"
    api_version: v1
    namespace: istio-system
    kind: namespace
    name: istio-system
  register: istio_system_labels
- name: "Verifying the label in 'kube-system'."
  k8s_info:
    kubeconfig: "{{ istio_kubectl_config }}"
    api_version: v1
    namespace: kube-system
    kind: namespace
    name: kube-system
  register: kube_system_labels

# Output the labels in order to be able to manually verify them.
- name: "Displaying created labels."
  debug: var={{ item }}.metadata.labels
  loop: "{{ [istio_system_labels.resources, kube_system_labels.resources] | flatten(1) }}"

# Enforce mutual tls in istio.
# Note:
# Allow accessing the metric endpoints without it since Azure Monitor will otherwise 
# not be able to scrape these. Make sure to also allow any other workloads according 
# to the specified 'prometheus.io/port' in the resource.
- name: "Enforcing mutual tls in istio."
  k8s:
    src : "{{ istio_configuration_project_dir }}/peerauthentication_mutualtls.yaml"
    kubeconfig: "{{ istio_kubectl_config }}"
    state: present
- name: "Allow scraping the metric endpoint for: istio-egressgateway"
  k8s:
    src : "{{ istio_configuration_project_dir }}/peerauthentication_egressgateway.yaml"
    kubeconfig: "{{ istio_kubectl_config }}"
    state: present
- name: "Allow scraping the metric endpoint for: istio-ingressgateway"
  k8s:
    src : "{{ istio_configuration_project_dir }}/peerauthentication_ingressgateway.yaml"
    kubeconfig: "{{ istio_kubectl_config }}"
    state: present