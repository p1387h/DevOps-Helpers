apiVersion: v1
kind: Namespace
metadata:
  name: example-v2
  labels:
    istio-injection: enabled
    ns: example-v2
---
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: default
  namespace: example-v2
spec:
  egress:
  # Limit the possible egress targets to this collection. Only these are exported 
  # to the sidecar. It is advised to limit the hosts in large clusters to improve 
  # the performance since not all hosts are relevant for this workload.
  - hosts:
    - "./*"
    - "istio-system/*"
    - "example-v1/*"
---
# Do NOT allow any outgoing connections by default that are not the following target:
# - istio-system for lookups (certs, etc.)
# - istio-egressgateway (outgoing connections if any)
# - kubernetes dns
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-egress-to-istio-and-kube-dns
  namespace: example-v2
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          ns: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
  - to:
    - namespaceSelector:
        matchLabels:
          ns: istio-system
  - to:
    - namespaceSelector:
        matchLabels:
          ns: istio-egress
      podSelector:
        matchLabels:
          istio: egressgateway
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: helloworld-v2
  namespace: example-v2
  labels:
    account: helloworld-v2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: helloworld-v2
  namespace: example-v2
  labels:
    app: helloworld-v2
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: helloworld-v2
      version: v1
  template:
    metadata:
      labels:
        app: helloworld-v2
        version: v1
      annotations:
        # Scraping will fail since the helloworld pod does not expose metrics.
        prometheus.io/scrape: "true"   # Determines if a pod should be scraped. Set to true to enable scraping.
        prometheus.io/path: "/metrics" # Determines the path to scrape metrics at. Defaults to /metrics.
        prometheus.io/port: "8000"     # Determines the port to scrape metrics at. Defaults to 80.
        sidecar.istio.io/rewriteAppHTTPProbers: "false" # Determines if the kubernetes http probes should be rewritten or not.
    spec:
      serviceAccountName: helloworld-v2
      containers:
      - name: helloworld
        image: crccheck/hello-world
        resources:
          requests:
            cpu: "100m"
        imagePullPolicy: IfNotPresent # Always
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: helloworld-v2
  namespace: example-v2
  labels:
    app: helloworld-v2
spec:
  ports:
  - name: http
    port: 8000
  selector:
    app: helloworld-v2
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: helloworld-v2
  namespace: example-v2
spec:
  # Do NOT set the "exportTo" key here since the Gateway resource
  # must be able to see the service. By default all virtual services,
  # service entries and destination rules are globally visible.
  hosts:
  - eu-example-01.westeurope.cloudapp.azure.com
  - helloworld-v2.example-v2.svc.cluster.local
  gateways:
  - istio-ingress/helloworld-v2-gateway
  - mesh
  http:
  - name: "v2-endpoint"
    match:
    - uri:
        prefix: "/v2"
    - uri:
        prefix: "/v2/"
    rewrite:
      uri: "/"
    route:
    - destination:
        port:
          number: 8000
        host: helloworld-v2.example-v2.svc.cluster.local
---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: helloworld-v2-gateway
  namespace: istio-ingress
spec:
  selector:
    istio: ingressgateway # Use Istio default gateway implementation.
  servers:
  - port:
      number: 80
      name: http2
      protocol: HTTP2
    hosts:
    # Namespace/VirtualServiceHost
    - "example-v2/eu-example-01.westeurope.cloudapp.azure.com"
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: helloworld-v2
  namespace: example-v2
spec:
  selector:
    matchLabels:
      app: helloworld-v2
      version: v1
  action: ALLOW
  rules:
  # Prometheus scraping.
  - from:
    - source:
        principals: ["cluster.local/ns/prometheus-stack/sa/prometheus-stack-kube-prom-prometheus"]
        namespaces: ["prometheus-stack"]
    to:
    - operation:
        methods: ["GET"]
        paths: ["/metrics"]
        ports: ["8000"]
  # Default ingress.
  - from:
    - source:
        namespaces: ["istio-ingress"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]