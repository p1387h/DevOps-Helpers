apiVersion: v1
kind: Namespace
metadata:
  name: example-v1
  labels:
    istio-injection: enabled
    ns: example-v1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: helloworld-v1
  namespace: example-v1
  labels:
    app: helloworld-v1
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: helloworld-v1
      version: v1
  template:
    metadata:
      labels:
        app: helloworld-v1
        version: v1
    spec:
      containers:
      - name: helloworld
        image: crccheck/hello-world
        resources:
          requests:
            cpu: "100m"
        imagePullPolicy: IfNotPresent #Always
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: helloworld-v1
  namespace: example-v1
  labels:
    app: helloworld-v1
spec:
  ports:
  - name: http
    port: 8000
  selector:
    app: helloworld-v1
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: helloworld-v1
  namespace: example-v1
spec:
  # Do NOT set the "exportTo" key here since the Gateway resource
  # must be able to see the service. By default all virtual services,
  # service entries and destination rules are globally visible.
  hosts:
  - eu-example-01.westeurope.cloudapp.azure.com
  - helloworld-v1.example-v1.svc.cluster.local
  gateways:
  - istio-ingress/helloworld-v1-gateway
  - mesh
  http:
  - name: "v1-endpoint"
    match:
    - port: 80
      uri:
        prefix: "/v1"
    rewrite:
      uri: "/"
    route:
    - destination:
        port:
          number: 8000
        host: helloworld-v1.example-v1.svc.cluster.local
---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: helloworld-v1-gateway
  namespace: istio-ingress
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
  - port:
      number: 80
      name: http2
      protocol: HTTP2
    hosts:
    # Namespace/VirtualServiceHost
    - "example-v1/eu-example-01.westeurope.cloudapp.azure.com"