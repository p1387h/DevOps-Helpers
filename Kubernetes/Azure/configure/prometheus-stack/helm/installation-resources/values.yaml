grafana:
  # Overwrite this value when executing helm.
  adminPassword: null
alertmanager:
  alertmanagerSpec:
    replicas: 1
    # Try to place each pod on a different node.
    podAntiAffinity: soft
    # Storage definition for persistent data.
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: azurefile
          accessModes:
            - ReadWriteOnce
          volumeName: azurefile-alertmanager
          resources:
            requests:
              storage: 50Gi
prometheus:
  prometheusSpec:
    replicas: 1
    # Try to place each pod on a different node.
    podAntiAffinity: soft
    # Storage definition for persistent data.
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: azurefile
          accessModes:
            - ReadWriteOnce
          volumeName: azurefile-prometheus
          resources:
            requests:
              storage: 50Gi
    podMetadata:
      annotations:
        sidecar.istio.io/inject: "true" # Make istio inject a sidecar into prometheus pods.
        traffic.sidecar.istio.io/includeInboundPorts: ""   # Do not intercept any inbound ports.
        traffic.sidecar.istio.io/includeOutboundIPRanges: ""  # Do not intercept any outbound traffic.
        proxy.istio.io/config: |  # Configure an env variable `OUTPUT_CERTS` to write certificates to the given folder.
          proxyMetadata:
            OUTPUT_CERTS: /etc/istio-output-certs
        sidecar.istio.io/userVolume: '[{"name": "istio-certs", "emptyDir": {"medium":"Memory"}}]'  # Mount the shared volume.
        sidecar.istio.io/userVolumeMount: '[{"name": "istio-certs", "mountPath": "/etc/istio-output-certs"}]'
    volumes:
      - name: istio-certs
        emptyDir:
          medium: Memory
    volumeMounts:
      # Mount the sidecar volume into prometheus to access the certificates.
      - mountPath: /etc/istio-certs
        name: istio-certs